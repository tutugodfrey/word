{"version":3,"sources":["../../main/test/test.js"],"names":["assert","expect","jsonObject","describe","it","to","equal","deep"],"mappings":";;AACA;;;;AACA;;;;AACA,IAAMA,SAAS,eAAKA,MAApB;AACA,IAAMC,SAAS,eAAKA,MAApB;AACA,IAAMC,aAAa;AAChB,SAAO,CADS;AAEhB,OAAK,CAFW;AAGhB,SAAO,CAHS;AAIhB,SAAO;AAJS,CAAnB;AAMAC,SAAS,MAAT,EAAiB,YAAM;AACtBA,UAAS,eAAT,EAA0B,YAAM;AAC/BC,KAAG,2BAAH,EAAgC,YAAM;AACrCH,UAAO,gBAAK,CAAL,CAAP,EAAgBI,EAAhB,CAAmBC,KAAnB,CAAyB,KAAzB;AACA,GAFD;AAGAF,KAAG,2BAAH,EAAgC,YAAM;AACrCH,UAAO,gBAAK,EAAL,CAAP,EAAiBI,EAAjB,CAAoBE,IAApB,CAAyBD,KAAzB,CAA+B,KAA/B;AACA,GAFD;AAGA,EAPD;;AASAH,UAAS,aAAT,EAAwB,YAAM;AAC7BC,KAAG,6BAAH,EAAkC,YAAM;AACvC;AACAH,UAAO,gBAAK,wBAAL,CAAP,EAAuCI,EAAvC,CAA0CE,IAA1C,CAA+CD,KAA/C,CAAqDJ,UAArD;AACA,GAHD;AAIAE,KAAG,sDAAH,EAA2D,YAAM;AAChE;AACAH,UAAO,gBAAK,0BAAL,CAAP,EAAyCI,EAAzC,CAA4CE,IAA5C,CAAiDD,KAAjD,CAAuDJ,UAAvD;AACA,GAHD;AAIAE,KAAG,8CAAH,EAAmD,YAAM;AACxD;AACAH,UAAO,gBAAK,MAAL,CAAP,EAAqBI,EAArB,CAAwBE,IAAxB,CAA6BD,KAA7B,CAAmC,EAAC,QAAO,CAAR,EAAnC;AACA,GAHD;AAIA,EAbD;AAgBA,CA1BD","file":"test.js","sourcesContent":["\r\nimport chai from 'chai';\r\nimport { word } from './../src/word';\r\nconst assert = chai.assert;\r\nconst expect = chai.expect\r\nconst jsonObject = {\r\n\t\t\t\"olly\":2,\r\n\t\t\t\"in\":1,\r\n\t\t\t\"come\":1,\r\n\t\t\t\"free\":1\r\n\t\t}\r\ndescribe('word', () => {\r\n\tdescribe('invalid input', () => {\r\n\t\tit('Should return false for 0', () => {\r\n\t\t\texpect(word(9)).to.equal(false);\r\n\t\t});\r\n\t\tit('Should return false for 0', () => {\r\n\t\t\texpect(word([])).to.deep.equal(false);\r\n\t\t});\r\n\t});\r\n\r\n\tdescribe('valid input', () => {\r\n\t\tit('should return a json object', () => {\r\n\t\t\t// test sentence with only without punctuations\r\n\t\t\texpect(word(\"olly olly in come free\")).to.deep.equal(jsonObject)\r\n\t\t});\r\n\t\tit('should return a json object \"olly olly in come free\"', () => {\r\n\t\t\t// test for word with punctations\r\n\t\t\texpect(word(\"olly, olly, in come free\")).to.deep.equal(jsonObject)\r\n\t\t});\r\n\t\tit('should return a json object for value \"word\"', () => {\r\n\t\t\t// test for word with punctations\r\n\t\t\texpect(word(\"word\")).to.deep.equal({\"word\":1})\r\n\t\t});\r\n\t});\r\n\r\n\r\n});\r\n"]}